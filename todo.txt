============================================================
File: runner.py, Line: 26

    def create_optimizers(self):
        # TODO: Need to pass other params like: momentum, weight_decay, etc...
        optimizer_dict = {}
        for network_name, network in self.network.networks.items():
============================================================

============================================================
File: runner.py, Line: 55

    def train(self):
        # TODO: This is going to be DQN specific at first, to be fixed later
        scores = []
        for episode in range(self.agent.config["training"]["episodes"]):
============================================================

============================================================
File: builder.py, Line: 9

def builder(config: List[Dict[str, dict[str, Any]]], python: List[str]):
    # TODO: Validate the configuration, Use the validate_config() function in config_parser.py
    
    # Turns the string config values into the actual classes
============================================================

============================================================
File: nn_models.py, Line: 91
        means, variances, mixture_coef = self.mdn(lstm_out[0])

        # TODO: Implement correct sampling for MDN
        return mdn_out[0]

============================================================

============================================================
File: nn_models.py, Line: 96
class LSTMCell:
    def __init__(self, input_size, hidden_size):
        # TODO: These weights can be unified, which requires fewer matmuls, find out how it's equivelant to this
        weights = lambda: (Tensor.uniform(input_size, hidden_size),
                           Tensor.uniform(hidden_size, hidden_size),
============================================================

============================================================
File: environment.py, Line: 10

def preprocess(observation: np.ndarray) -> np.ndarray:
    # TODO: Where should preprocessing be done?
    # TODO: Remove hardcoding from preprocessing
    resized = cv2.resize(observation, (64, 64), interpolation=cv2.INTER_AREA)
============================================================

============================================================
File: environment.py, Line: 11
def preprocess(observation: np.ndarray) -> np.ndarray:
    # TODO: Where should preprocessing be done?
    # TODO: Remove hardcoding from preprocessing
    resized = cv2.resize(observation, (64, 64), interpolation=cv2.INTER_AREA)
    return resized
============================================================

============================================================
File: perception.py, Line: 10

def load_dataset(path: str, num_episodes: int, num_frames: int) -> np.ndarray:
    # TODO: The input resolution is hardcoded for CarRacing example, fix this
    data = np.zeros((num_episodes, num_frames, 64, 64, 3), dtype=np.uint8)
    files = [os.path.join(os.getcwd()+"/tests/datasets/vision", file) for file in os.listdir(path)]
============================================================

============================================================
File: replay_buffer.py, Line: 4
from collections import namedtuple

# TODO: This is a hack that needs to be rewritten
implemented_envs = ["CarRacing-V2"]

============================================================

